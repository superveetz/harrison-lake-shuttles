type App
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  name: String!
  slogan: String
  infoEmail: String!
  companyStreetAddress: String
  companyCity: String
  companyProvState: String
  companyPostalZip: String
  companyStartYear: String
}

type TicketType
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  age: String!
  price: Float!
}

type Ticket
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  orderNum: Int
  departsLong: String
  arrivesLong: String
  departsLocName: String
  departsLocStreet: String
  departsLocCity: String
  departsLocPostal: String
  departsTime: String
  departsDesc: String
  arrivesLocName: String
  arrivesLocStreet: String
  arrivesLocCity: String
  arrivesLocPostal: String
  arrivesTime: String
  arrivesDesc: String
  transitDesc: String
  restBreakLocations: [String]
  ticketTypes: [TicketType] @connection
}

type TicketSaleType
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [create] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  age: String!
  travellerName: String!
  price: Float!
  ticket: TicketSale @connection(name: "TicketSale_TicketTypeSale")
}

type TicketSale
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [create] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  type: Ticket! @connection
  arrivesDropoffLoc: String
  departsPickupLoc: String
  requiresWheelchair: Boolean!
  ticketTypes: [TicketSaleType] @connection(name: "TicketSale_TicketTypeSale")
  transaction: Transaction @connection(name: "Transaction_TicketSales")
  schedule: Schedule @connection(name: "Schedule_TicketSales")
}

type Transaction
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [], mutations: [create] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  payeeName: String!
  payeeEmail: String!
  payeePhone: String!
  totalPaid: Float!
  tickets: [TicketSale] @connection(name: "Transaction_TicketSales")
}

type Schedule
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [create] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  date: String!
  departureTicket: Ticket! @connection
  tickets: [TicketSale] @connection(name: "Schedule_TicketSales")
  reservedSeats: [ReservedSeat] @connection
  closed: Boolean
}

type ReservedSeat
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["everyone"], queries: [get, list], mutations: [] },
      { allow: groups, groups: ["Full-Access-Admin"], queries: [get, list], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  name: String!
  note: String
  requiresWheelchair: Boolean
}